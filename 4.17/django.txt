定义模板类
创建子应用booktest,在models.py文件中定义模型类
from django.db import models

#定义图书模型类 BookInfo
class BookInfo(models,Model):
    btitle = models.CharField(max_length=20,verbose_name='名称')
    bpub_date = models.DateField(verbose_name='发布日期')
    bread = models.IntergerField(default=0,verbose_name='阅读量')
    bcomment = models.IntegerField(default=0,verbose_name='评论量')
    is_delete = models.BolleanField(default=False,verbose_name='逻辑删除')

    class Meta:
    db_table = 'tb_books' #指明数据库表名
    verbose_name = '图书' #在admin站点中显示的名称
    verbose_name_plural = verbose_name #显示的负数名称

    def __str__(self):
        """定义每个数据对象的显示信息"""
        return self.btitle

#定义英雄模型类 HeroInfo
class HeroInfo(models.Model):
    GENDER_CHOICES = (
        (0,'female'),
        (1,'male')
    )
    hname = models.CharField(max_length=20,verbos_name='名称')
    hgender = models.SmallIntegerField(choices=GENDER_CHOICES,default=0,verbose_name='性别')
    hcomment = models.CharField(max_length=200,null=True,verbose_name='描述信息')
    hbook = models.ForeignKey(BookInfo,on_delete=models.CASCADE,verbose_name='图书') #外键
    is_delete = models.BooleanField(default=False,verbose_name='逻辑删除')

    class Meta:
        db_table = 'tb_heros'
        verbose_name = '英雄'
        verbose_name_plural = verbose_name

    def __str__(self):
        return self.hname
1,数据库表名
模型类如果未知名表名,django默认以小写app应用名_小写模型类名为数据库表名
2,关于主键
django会为表创建自动正常的主键列,每个模型只能有一个主键列,如果选项设置某属性为主键列后django不会再创建自动增长的主键列
默认创建的主键列属性为id,可以使用pk代替,pk全屏为primary key
3,属性命名限制
不能是python的保留关键字
不允许使用连续的下划线,这是由django的查询方式决定的
定义属性时需要指定字段类型,通过字段类型的参数指定选项,语法如下:
属性=models.字段类型(选项)
4,字段类型
类型               说明
AutoField         自动增长的integerField,通常不用指定,不指定时Django会自动创建属性名为id的自动增长属性
BolleanField      布尔字段,值为True或False
NullBolleanField  支持Null,True,False三种值
CharField         字符串,阐述max_length表示最大字符个数
TextField         大文本字段,一般超过4000个字符时使用
IntegerField      整数
DecimalField      十进制浮点数,参数max_digits表示总位数,参数decimal_places表示小数位数
FloatField        浮点数
DateField         日期,参数auto_now表示每次保存对象时,自动设置该字段为当前时间,用于"最后一次修改"的时间戳,他总是使用当前日期,默认为False;参数auto_now_add表示当前对象第一次被创建时自动设置当前时间,用于创建的时间戳,它总是使用当前日期,默认为False;参数auto_now_add和auto_now是相互排斥的,组合将会发生错误
TimeField         时间,参数筒DateField
DateTimeField      日期时间,参数筒DateField
FileField           上茶UN文件字段
ImageField          继承于FileField,对上传的内容进行校验,确保是有效的图片
5,选项
选项            说明
null            如果为True,表示允许空,默认值是False
blank           如果为True,表示该字段运行为空白,默认值是False
db_column       字段的名称,如果未指定,则使用属性的名称
db_index        若值为True,在表中会为此字段创建索引,默认值是False
default         默认
primary_key     若为True,则该字段会成为模型的主键字段,默认值是False,一般作为AutoField的选项使用
unique          如果为True,这个字段在表中必须有唯一值,默认值是False
related_name    在关联查询中,代替单一对象查找多对象,对象名小写_set(book.heroinfo_set.all())的写法
auto_now_add    只要在添加数据的时候,记录时间
auto_now        数据添加和更新的时候,记录时间
null是数据库范畴的概念,blank是表单验证范畴的
6,外键
在设置外键时,需要通过on_delete选项指明主表删除数据时,对于外键应用表数据如何处理,在django_db.models中包含了可选常量:
CASCADE级联,删除主表数据时连通一起删除外键表中数据
PROTECT保护,通过跑错ProtectedError异常,来阻止删除主表中被外键应用的数据
SET_NULL设置为NULL,仅在该字段null=True荀彧为null时使用
SET_DEFAULT设置为默认值,仅在该字段设置了默认值时可以用
SET()设置为特定值或者调用特定方法
DO_NOTHING不做任何操作,如果数据库前置指明级联性,此选项会抛出IntergritError异常

迁移
将模型类同步到数据库中
1,生成迁移文件
python manage.py makemigrations
2,同步到数据库中
python manage.py migrate

添加测试数据

数据库的增删改查
增加
save
通过创建模型类对象,执行对象的save()方法保存到数据库中
from datetime import date
book = BookInfo(
    btitle='西游记',
    bpub_date=date(1988,1,1),
    bread = 10,
    bcomment = 10
)
book.save()

create
通过模型类.objects.create()保存
HeroInfo.objects.create(
    hname='沙悟净',
    hgender = 8,
    hbook = book,
)
<HeroInfo:沙悟净>

删除 
使用对象删除
对象.delete()
例如:
#获取对象
hero = HeroInfo.objects.get(id=13)
#调用对象的删除方法:
hero.delete()
使用查询级删除
模型类.object.filter().delete()
例如:
HeroInfo.objects.filter(id=12).delete()

修改
save
修改模型类对象的属性,然后执行save()方法
对象.save()
例如
hero = HeroInfo.objects.get(hname='猪八戒')
hero.hname = '猪无能'
hero.save()

update
使用方式
查询集.update()
HeroInfo.objects.filter(hname='沙悟净').update(hname='沙僧')

查询
基本查询
get查询单一结果,如果不存在会抛出模型类.DoesNotExist异常
all查询多个结果
count查询结果数量
#all的使用
BookInfo.objects.all()
<QuerySet[<BookInfo:射雕英雄传>,<BookInfo:天龙八部>,<BookInfo:笑傲江湖>,<BookInfo:雪山飞狐>,<BookInfo:西游记>]>
#get的使用
BookInfo.objects.get(id=3)
#或者是这样使用
book = BookInfo.object.get(btitle='西游记')
book.id

#count的使用:
BookInfo.objects.count()

过滤查询
filter过滤出多个结果
exclude排除掉符合条件剩下的结果
get过滤单一结果
过滤条件的表达语法如下:
属性名称_比较运算符 = 值

相等
exact:表示判等
BookInfo.objects.filter(id_exact=1)
可简写为:
BookInfo.objects.filter(id=1)

模糊查询
contains:是否包含
BookInfo.objects.filter(btitle_contains='传')

startswith,endswith:以指定值开头或结尾
BookInfo.objects.filter(btitle_endswith='部')

范围查询
BookInfo.objects.filter(id_in=[1,3,5])

比较查询
gt大于
gte大于等于
it小于
ite小于等于
BookInfo.objects.filter(id_gt=3)

日期查询
year,month,day,week_day,hour,minute,second:对日期时间类型的属性进行运算
BookInfo.object.filter(bpub_date_year=1980)
BookInfo.object.filter(bpub_date_gt=date(1990,1,1))

F对象和Q对象
F对象
语法
F(属性名)
from django.db.models import F
BookInfo.objects.filter(bread__gte=F('bcomment'))
BookInfo.objects.filter(bread__gt=F('bcomment')*2)

Q对象
多个过滤器逐个调用表示逻辑与关系
查询阅读量大于20,并且编号小于3的图书
BookInfo.objects.filter(bread__gt=20,id__It=3)
或
BookInfo.objects.filter(bread__gt=20).filter(id__It=3)

使用Q()对象结合|运算符实现逻辑或(or)的查询
Q(属性名__运算符=值)
例:查询阅读量大于20的图书,改写为Q对象如下:
from django.db.models import Q
#获取数据
BookInfo.objects.filter(Q(bread__gt=20))
Q对象可以使用&,|连接,&表示逻辑与,|表示逻辑或,
例:查询阅读量大于20,或编号小于3的图书,只能使用Q对象实现
BookInfo.obkects.filter(Q(bread__gt=20)|Q(pk__It=3))
Q对象前可以使用~操作符,表示非not.
例:查询编号不等于3的图书
BookInfo.objects.filter(~Q(ok-3))

聚合函数和排序
聚合函数
使用aggregate()过滤器调用聚合函数
聚合函数包括
Avg平均
Count数量
Max最大,
Min最小
Sum求和
被定义在django.db.models中
例:查询图书的总阅读量
from django.db.models import Sum
BookInfo.objects.aggregate(Sum('bread'))
aggregate的返回值是一个字典类型,
{'属性名__聚合类小写':值}
如:{'bread_sum':3}
使用count时一般不适用aggregate()过滤器
例:查询图书总数
BookInfo.objects.count()

排序
使用order_by对结果进行排序
BookInfo.objects.all().order_by('bread')#升序
BookInfo.objects.all().order_by('-bread')#降序

关联查询
由一到多的访问
使用格式:
一对应的模型类对象.多对应的模型类名小写_set
例:
b = BookInfo.objects.get(id=1)
#套用上面的格式
b.heroinfo_set.all()
#如果在
#hbook = models.ForeignKey(BookInfo,related_name='heros'_
#可以替换成b.heros.all()

由多到一的访问
使用格式
多对应的模型类对象.外键名
例:
h = HeroInfo.objects.get(id=1)
#套用上面的格式:
h.hbook

查询集
概念
Django的ORM中存在查询集概念
两大特性
惰性执行
当执行如下语句时,并未进行数据库查询,只是创建了一个查询集qs
qs = BookInfo.objects.all()
继续执行遍历迭代操作后,才真正的进行了数据库的查询
for book in qs:
    print(book.btitle)
缓存
使用同一个查询集,第一次使用时会发生数据库的查询,然后Django会把结果缓存下来,再次使用这个查询集时会使用缓存的数据,减少了数据库的查询次数
如果是两个查询集,无法重用缓存,每次查询都会与数据库进行一次交互,增加了数据库的负载
from booktest.models import BookInfo
[book.id for book in BookInfo.objects.all()]
[book.id for book in BookInfo.objects.all()]
经过存储后,可以重用查询集,第二次使用缓存中的数据
qs = BookInfo.objects.all()
[book.id for book in qs]
[book.id for book in qs]

限制查询集
对查询集进行切片后返回一个新的查询集,不会立即执行查询
如果获取一个对象,直接使用[0],等同于[0:1].get(),但是如果没有数据,[0]引发indexError异常,[0:1].get()如果没有数据引发DoesNotExist异常
3获取第1,2项,
qs = BookInfo.objects.all()[0:2]

















